#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import smbus
import math
from sensor_msgs.msg import Imu
from std_msgs.msg import Header

class MPU6050:
    def __init__(self, bus=0, address=0x69):
        self.bus = smbus.SMBus(bus)
        self.address = address
        
        #Wake mpu
        self.bus.write_byte_data(self.address, 0x6B, 0)
        
        # Configure gyroscope 
        self.bus.write_byte_data(self.address, 0x1B, 0)
        
        # Configure accelerometer
        self.bus.write_byte_data(self.address, 0x1C, 0)
        
        # Account for sensitivity values from datasheet
        self.accel_scale = 16384.0  
        self.gyro_scale = 131.0     
        
    def read_raw_data(self, addr):

        high = self.bus.read_byte_data(self.address, addr)
        low = self.bus.read_byte_data(self.address, addr + 1)
        
        # Combining high and low bytes
        value = (high << 8) | low
        
        # Converting to signed
        if value > 32767:
            value -= 65536
            
        return value
    
    def get_accel_xy(self):
        # 2d linear acceleration data
        x = self.read_raw_data(0x3B) / self.accel_scale
        y = self.read_raw_data(0x3D) / self.accel_scale
        
        # Converting to m/s^2
        x *= 9.81
        y *= 9.81
        
        return (x, y)
    
    def get_gyro_z(self):
        #2d angular acceleration data
        z = self.read_raw_data(0x47) / self.gyro_scale
        
        # Convert to radians/sec
        z *= math.pi / 180.0
        
        return z

class IMUPublisher(Node):
    def __init__(self):
        super().__init__('IMU_Publisher')
        
        # Create publisher for IMU data
        self.publisher_ = self.create_publisher(Imu, 'imu0', 10)
        
        # Create timer for publishing at 10Hz
        self.timer = self.create_timer(0.1, self.get_imu_info)
        
        # Initialize MPU6050
        try:
            self.mpu = MPU6050()
        except Exception as e:
            self.get_logger().error(f"Failed to initialize: {e}")
            raise e
    
    def get_imu_info(self):
        
        # Get 2D sensor data
            
        # Create IMU message
        msg = Imu()
            
        # Set header
        msg.header = Header()
        msg.header.stamp = self.get_clock().now().to_msg()

        msg.angular_velocity.x = 0.0
        msg.angular_velocity.y = 0.0
        msg.angular_velocity.z = self.mpu.get_gyro_z()


        accel_x, accel_y = self.mpu.get_accel_xy()
        msg.linear_acceleration.x = accel_x
        msg.linear_acceleration.y = accel_y
        msg.linear_acceleration.z = 0.0

        self.get_logger().info('Publishing imu data...')
        self.publisher_.publish(msg)
        
def main(args=None):
    rclpy.init(args=args)
    
    try:
        node = IMUPublisher()
        rclpy.spin(node)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()